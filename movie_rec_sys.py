# -*- coding: utf-8 -*-
"""Movie_Rec_Sys

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1d-pqxeN3zjQzFiqv5w0NfZ0rcQwjHFch
"""

import pandas as pd
import numpy as np
import pickle

gitlinks=["https://raw.githubusercontent.com/LiyaT3/Data_Files/main/tmdb_5000_credits.csv","https://raw.githubusercontent.com/LiyaT3/Data_Files/main/tmdb_5000_movies.csv"]
credits = pd.read_csv(gitlinks[0])
movies = pd.read_csv(gitlinks[1])

movies.head(3)

credits.head(2)

#Merging both
movies = movies.merge(credits, on ="title")

movies.head(3)

#genres, id,keywords,original_title,overview, cast , crew
#movies['original_language'].value_counts - Majority is English
movies.info()

print(movies.columns)

cols = ['movie_id', 'genres', 'keywords', 'original_title', 'overview', 'cast', 'crew']
movies = movies[cols]

movies.isnull().sum()

movies.dropna(inplace = True)

movies.duplicated().sum()

movies.iloc[0].genres

#Converting into right format of ['Action','Adventure','Fantasy'..]
import ast
def convert_format(obj):
  l = []
  for i in ast.literal_eval(obj):
    l.append(i['name'])
  return l

movies['genres'] = movies['genres'].apply(convert_format)

movies['genres'].head(3)

#movies['keywords']=movies['keywords'].apply(convert_format)

movies['cast'][0]

def convert_3(obj):
  l = []
  counter = 0
  for i in ast.literal_eval(obj):
    if counter !=3 :
      l.append(i['name'])
      counter+=1
    else:
      break
  return l

movies['cast'] = movies['cast'].apply(convert_3)

movies['crew'][0]

#Choosing only when the job is Director
def fetch_dir(obj):
  l=[]
  for i in ast.literal_eval(obj):
    if i['job']=='Director':
      l.append(i['name'])
      break
  return l

movies['crew'] = movies['crew'].apply(fetch_dir)

movies['overview'][0]

movies['overview'] = movies['overview'].apply(lambda x : x.split())

#To remove the spaces between the words
movies['genres'] = movies['genres'].apply(lambda x : [i.replace(" ","") for i in x])
movies['keywords'] = movies['keywords'].apply(lambda x : [i.replace(" ","") for i in x])
movies['cast'] = movies['cast'].apply(lambda x : [i.replace(" ","") for i in x])
movies['crew'] = movies['crew'].apply(lambda x : [i.replace(" ","") for i in x])

#To create a new col which has all the 4 columns
movies['tags'] = movies['overview']+movies['genres']+movies['keywords']+movies['cast']+movies['crew']

print(movies.columns)

new_df = movies[['movie_id', 'original_title', 'tags']]

new_df['tags']=new_df['tags'].apply(lambda x: " ".join(x))

new_df['tags'][0]

new_df['tags'] = new_df['tags'].apply(lambda x:x.lower())

new_df.head()

from sklearn.feature_extraction.text import CountVectorizer
cv = CountVectorizer(max_features = 500, stop_words = 'english')

vectors = cv.fit_transform(new_df['tags']).toarray()

cv.get_feature_names_out()

vectors[0]

import nltk

from nltk.stem.porter import PorterStemmer
ps = PorterStemmer()

def stem(text):
  y = []
  for i in text.split():
    y.append(ps.stem(i))
  return " ".join(y)

new_df['tags'] = new_df['tags'].apply(stem)



from sklearn.metrics.pairwise import cosine_similarity

similarity = cosine_similarity(vectors) #Distance of each movie to the rest 4806

sorted(list(enumerate(similarity[0])), reverse = True , key = lambda x : x[1])[1:6]

def rec(movie):
  movie_index = new_df[new_df['original_title'] == movie].index[0]
  distances = similarity[movie_index]
  movies_list = sorted(list(enumerate(similarity[0])), reverse = True , key = lambda x : x[1])[1:6]
  for i in movies_list:
    print(new_df.iloc[i[0]].original_title)

print(new_df.columns)

new_df.iloc[1216].original_title

rec('Batman Begins')
pickle.dump(new_df,open('movies.pkl','wb'))
pickle.dump(similarity, open('Similarity.pkl','wb'))